# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import streamlit as st
import pandas as pd
import numpy as np
DATA_URL = ("Data.xlsx")
data = pd.read_excel('Data.xlsx')
data = data[0:2000]

####
st.title("Data Analytics - Willow Park Golf Course - Restaurant Data - June 20 2020 to July 20 2020")
st.markdown("This is a streamlit dashboard used to analyze data and provide data-driven solutions to business optimization Problem. Analyzing the data from the first month of business post COVID-19 lockdown will help take actions that will result in improved business performance. ðŸ—½ðŸ’¥")
if st.checkbox("Show Data", False):
    st.subheader('Data')
    st.write(data)
####

####
df2 = data[['Order_ID', 'SERVER','TOTAL']]
group = df2.groupby('Order_ID')
df3 = group['TOTAL'].agg([np.sum])
df4 = df2[['Order_ID','SERVER']]
df4 = df4.drop_duplicates()
group2 = df2.groupby('SERVER')
df5 = group2['TOTAL'].agg([np.sum])
df5['SERVER_NAME'] = df5.index
df6 = df4['SERVER'].value_counts()
df6.columns = ['server_name','num_of_bills']
df6 = df6.to_frame()
df6['SERVER_NAME']=df6.index
df7 = pd.merge(df5, df6, on='SERVER_NAME', how='outer')
df7['avg_bill'] = df7['sum']/df7['SERVER']
df7 = df7.rename(columns={"sum": "Total revenue generated", "SERVER_NAME": "Server Name", "SERVER" : "Customers served", "avg_bill" : "Average revenue per bill"})
df7.sort_values(by='Average revenue per bill', ascending=False)
q = df7.sort_values(by='Average revenue per bill', ascending=False)
w = df7.sort_values(by='Total revenue generated', ascending = False)
df8 = df7
df9 = data[['DATE','TOTAL']]
a = df9.groupby('DATE')
df9 = a['TOTAL'].agg([np.sum])
df10 = data[['DATE','Order_ID']]
b = df10.groupby('DATE')
df10 = b['Order_ID'].nunique()
df11 = pd.merge(df9, df10, on='DATE', how='outer')
df11['avg'] = df11['sum']/df11['Order_ID']
df11.std()

st.header("Server performances for the month :")
select = st.selectbox('Show the list of servers by:', ['Efficiency', 'Revenue generated', 'Customers attended'])

if select == 'Efficiency':
        st.write(q)
        st.markdown("Standard deviation for average revenue generated everyday is %i dollars" %(df11['avg'].std()))
        st.markdown("The standard deviation in the average revenue generated by the servers is 7.0022 ~ 7 Dollars. (Ignoring outlier server name Bailey T.) The total number of customers served by the server's with low average revenue generated is %i. (Contributing to negative standard deviation.) Replacing these servers with the server's with higher average revenue or awarding performance based incentives will see an improved business as follows : 7 * %i = $ %i i.e. %i increase in revenue." %(df8['Customers served'][8:].sum() , df8['Customers served'][8:].sum() , 7 * df8['Customers served'][8:].sum() , ((7 *df8['Customers served'][8:].sum())/df11['sum'].sum())*100))
if select == 'Revenue generated':
        st.write(df7.sort_values(by='Total revenue generated', ascending=False))
        st.markdown("Deb, Jillian and Ashley have attended %i of the total %i customers in the month, contributing to more than half of the revenue generated. Jillian has a higher average revenue per bill" %(w['Customers served'][0:3].sum() , w['Customers served'].sum()))
elif select == 'Customers attended':
        st.write(df7.sort_values(by='Customers served', ascending=False))